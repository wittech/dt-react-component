"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "withDocs", {
  enumerable: true,
  get: function get() {
    return _withDocs.default;
  }
});
Object.defineProperty(exports, "withReadme", {
  enumerable: true,
  get: function get() {
    return _withReadme.default;
  }
});
Object.defineProperty(exports, "doc", {
  enumerable: true,
  get: function get() {
    return _backwardCompatibility.doc;
  }
});
exports.addReadme = exports.addFooter = exports.addHeader = exports.configureReadme = void 0;

var _react = _interopRequireDefault(require("react"));

var _addons = _interopRequireWildcard(require("@storybook/addons"));

var _getDocsLayout = _interopRequireDefault(require("./services/getDocsLayout"));

var config = _interopRequireWildcard(require("./services/config"));

var _getParameters = _interopRequireDefault(require("./services/getParameters"));

var _ReadmeContent = _interopRequireDefault(require("./components/ReadmeContent"));

var _const = require("./const");

var _withDocs = _interopRequireDefault(require("./with-docs"));

var _withReadme = _interopRequireDefault(require("./with-readme"));

var _backwardCompatibility = require("./backwardCompatibility");

var configureReadme = function configureReadme(parameters) {
  config.addHeader(parameters.header);
  config.addFooter(parameters.footer);
  config.addStoryPreview(parameters.StoryPreview);
  config.addDocPreview(parameters.DocPreview);
  config.addHeaderPreview(parameters.HeaderPreview);
  config.addFooterPreview(parameters.FooterPreview);
};

exports.configureReadme = configureReadme;

var addHeader = function addHeader(md) {
  config.addHeader(md);
};

exports.addHeader = addHeader;

var addFooter = function addFooter(md) {
  config.addFooter(md);
};

exports.addFooter = addFooter;
var addReadme = (0, _addons.makeDecorator)({
  name: 'addReadme',
  parameterName: 'readme',
  wrapper: function wrapper(getStory, context) {
    var parameters = (0, _getParameters.default)(context);

    var story = _react.default.createElement(_react.default.Fragment, null, getStory(context));

    var layout = parameters.layout ? parameters.layout : (0, _getDocsLayout.default)({
      footer: parameters.footer || '',
      header: parameters.header || '',
      md: parameters.content || '',
      excludePropTables: parameters.excludePropTables || [],
      includePropTables: parameters.includePropTables || [],
      story: story
    });

    var channel = _addons.default.getChannel();

    if (parameters.sidebar) {
      var sidebarLayout = (0, _getDocsLayout.default)({
        footer: parameters.footer || '',
        header: parameters.header || '',
        md: parameters.sidebar,
        excludePropTables: parameters.excludePropTables || [],
        includePropTables: parameters.includePropTables || [],
        story: story
      });
      channel.emit(_const.CHANNEL_SET_SIDEBAR_DOCS, {
        layout: sidebarLayout,
        theme: parameters.theme,
        codeTheme: parameters.highlightSidebar ? parameters.codeTheme : null
      });
    }

    return _react.default.createElement(_ReadmeContent.default, {
      layout: layout,
      theme: parameters.theme,
      codeTheme: parameters.highlightContent ? parameters.codeTheme : null,
      StoryPreview: parameters.StoryPreview,
      HeaderPreview: parameters.HeaderPreview,
      DocPreview: parameters.DocPreview,
      FooterPreview: parameters.FooterPreview
    });
  }
});
exports.addReadme = addReadme;