"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Text =
/*#__PURE__*/
function () {
  function Text(text) {
    _classCallCheck(this, Text);

    // 存储文本的二维数组
    this.texts = text.split('\n').map(function (line) {
      return line.split('');
    });
  }
  /**
   * 删除某一行
   * @param line
   * @return {Text}
   */


  _createClass(Text, [{
    key: "removeLine",
    value: function removeLine(line) {
      return this.removeLines(line, 1);
    }
    /**
     * 从某一行开始删除 n 行，默认为 1 行
     * @param line
     * @param deleteCount
     * @return {Text}
     */

  }, {
    key: "removeLines",
    value: function removeLines(line, deleteCount) {
      return this.spliceLines(line - 1, deleteCount);
    }
    /**
     * 插入一行行内文本
     * @param line
     * @param texts
     */

  }, {
    key: "insertLines",
    value: function insertLines(line) {
      for (var _len = arguments.length, texts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        texts[_key - 1] = arguments[_key];
      }

      return this.spliceLines.apply(this, [line, 0].concat(texts));
    }
  }, {
    key: "spliceLines",
    value: function spliceLines(startLine, deleteCount) {
      var _this$texts;

      for (var _len2 = arguments.length, texts = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        texts[_key2 - 2] = arguments[_key2];
      }

      var textsArray = texts.map(function (t) {
        return t.split('');
      });

      (_this$texts = this.texts).splice.apply(_this$texts, [startLine, deleteCount].concat(_toConsumableArray(textsArray)));

      return this;
    }
    /**
     * 从某一个位置切断行
     * @param line
     * @param column
     * @return {Text}
     */

  }, {
    key: "cutLine",
    value: function cutLine(line, column) {
      var lineText = this.texts[line - 1];
      this.texts[line - 1] = lineText.slice(0, column - 1); // 插入一行

      this.insertLines(line, lineText.slice(column - 1).join(''));
      return this;
    }
    /**
     * 把 line + 1 行合并到 line
     * @param line
     */

  }, {
    key: "mergeLine",
    value: function mergeLine(line) {
      var targetLine = this.texts[line - 1];
      var sourceLine = this.texts[line]; // 合并到 line - 1 行

      targetLine.splice.apply(targetLine, [targetLine.length, 0].concat(_toConsumableArray(sourceLine))); // 删除下一行

      this.removeLine(line + 1);
      return this;
    }
    /**
     * 删除 start-end 位置文本
     * @param start
     * @param end
     */

  }, {
    key: "removeBlock",
    value: function removeBlock(start, end) {
      var startLine = start.line,
          startColumn = start.column;
      var endLine = end.line,
          endColumn = end.column; // 切断

      this.cutLine(endLine, endColumn);
      this.cutLine(startLine, startColumn); // 删除中间行

      this.removeLines(startLine + 1, endLine - startLine + 1); // 连接

      this.mergeLine(startLine);
      return this;
    }
    /**
     * 在 line:column 处插入文本
     * @param line
     * @param column
     * @param block
     */

  }, {
    key: "insertBlock",
    value: function insertBlock(line, column, block) {
      var texts = block.split('\n');
      var len = texts.length;
      this.cutLine(line, column); // 全部插入

      this.insertLines.apply(this, [line].concat(_toConsumableArray(texts))); // 从下面 merge 开始，避免索引变化

      this.mergeLine(line + len);
      this.mergeLine(line);
      return this;
    }
  }, {
    key: "getLine",
    value: function getLine(line) {
      return this.texts[line - 1].join('');
    }
  }, {
    key: "getBlock",
    value: function getBlock(start, end) {
      var lines = [];

      for (var i = start.line; i <= end.line; i++) {
        var line = this.getLine(i);

        if (i === end.line) {
          line = line.substring(0, end.column - 1);
        }

        if (i === start.line) {
          line = line.substring(start.column - 1);
        }

        lines.push(line);
      }

      return lines.join('\n');
    }
    /**
     * 最终的结果
     * @return {string}
     */

  }, {
    key: "result",
    value: function result() {
      return this.texts.map(function (line) {
        return line.join('');
      }).join('\n');
    }
  }]);

  return Text;
}();

exports.default = Text;