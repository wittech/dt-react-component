"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('ast-plugin'),
    Plugin = _require.Plugin;
/**
 * 从字符串中找出所有的数字字符串和索引
 * @param s
 * @returns {Array}
 */


var findAllNumbers = function findAllNumbers(s) {
  var re = new RegExp('[0-9０-９]{1,}', 'g');
  var r = []; // 循环找出所有的数字

  while (true) {
    var matched = re.exec(s);

    if (matched) {
      r.push({
        number: matched[0],
        index: matched.index
      });
    } else {
      break;
    }
  }

  return r;
};
/**
 * 判断一个数字字符串是否存在全角数字
 * @param s
 * @returns {boolean}
 */


var isFullWidthNumber = function isFullWidthNumber(s) {
  return /[０-９]/.test(s);
};
/**
 * 无全角数字
 * no-fullwidth-number
 */


module.exports =
/*#__PURE__*/
function (_Plugin) {
  _inherits(_class, _Plugin);

  function _class() {
    _classCallCheck(this, _class);

    return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));
  }

  _createClass(_class, [{
    key: "pre",
    value: function pre() {}
  }, {
    key: "visitor",
    value: function visitor() {
      var _this = this;

      return {
        text: function text(ast) {
          var text = ast.node.value;
          var line = ast.node.position.start.line;
          var column = ast.node.position.start.column;
          findAllNumbers(text).forEach(function (num) {
            var number = num.number,
                index = num.index;

            if (isFullWidthNumber(number)) {
              _this.cfg.throwError({
                start: {
                  line: line,
                  column: column + index + 1
                },
                end: {
                  line: line,
                  column: column + index + 1 + number.length
                },
                text: "Full-width number exist: '".concat(number, "'")
              });
            }
          });
        }
      };
    }
  }, {
    key: "post",
    value: function post() {}
  }], [{
    key: "type",
    get: function get() {
      return 'no-fullwidth-number';
    }
  }]);

  return _class;
}(Plugin);