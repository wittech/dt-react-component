"use strict";

var _ = require('lodash');

var ruleHelper = require('./helper/rule');

var PluginClasses = [require('./space-round-alphabet'), require('./space-round-number'), require('./no-empty-code-lang'), require('./no-empty-url'), require('./no-empty-list'), require('./no-empty-code'), require('./no-empty-blockquote'), require('./no-special-characters'), require('./use-standard-ellipsis'), require('./no-fullwidth-number'), require('./no-space-in-emphasis'), require('./no-space-in-link'), require('./no-multiple-space-blockquote'), require('./no-trailing-punctuation'), require('./no-space-in-inlinecode')];
/**
 * 所有的 lint 规则，欢迎 pr 添加
 * @param throwError
 * @param rules
 * @returns {*[]}
 */

module.exports = function (throwError, rules) {
  // 所有的插件的默认 rules
  var initialRules = {};

  _.forEach(PluginClasses, function (Plugin) {
    initialRules[Plugin.type] = 2; // 默认都是 error
  }); // 用 rules 覆盖初始配置


  var rulesConfig = _.merge({}, initialRules, rules); // 配置为 0 的就是关闭，不启用插件！


  var Plugins = _.filter(PluginClasses, function (Plugin) {
    return rulesConfig[Plugin.type] !== 0;
  }); // 初始化插件


  return _.map(Plugins, function (Plugin) {
    var level = ruleHelper.ruleToLevel(rulesConfig[Plugin.type]); // 重新包装一下 throw 方法，加入 level

    var throwErrorFunc = function throwErrorFunc(error) {
      error.level = level;
      error.type = Plugin.type;
      throwError(error);
    };

    return new Plugin({
      throwError: throwErrorFunc
    });
  });
};