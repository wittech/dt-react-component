"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.astToText = exports.getLastChildLeaf = exports.getChildrenPosition = exports.astPositionTrans = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var astPointTrans = function astPointTrans(point) {
  return {
    line: _lodash.default.get(point, 'line', 0),
    column: _lodash.default.get(point, 'column', 0)
  };
};
/**
 * ast 的 position 转输出的 position
 * @param pos
 * @return {{start: {line, column}, end: {line, column}}}
 */


var astPositionTrans = function astPositionTrans(pos) {
  return {
    start: astPointTrans(pos.start),
    end: astPointTrans(pos.end)
  };
};
/**
 * 获得子节点的 position
 * @param node
 * @return {{start: *, end: *}}
 */


exports.astPositionTrans = astPositionTrans;

var getChildrenPosition = function getChildrenPosition(node) {
  var children = _lodash.default.get(node, 'children', []);

  if (children.length === 0) {
    return astPositionTrans(node.position);
  }

  var start = astPointTrans(_lodash.default.get(_lodash.default.head(children), 'position.start', {}));
  var end = astPointTrans(_lodash.default.get(_lodash.default.last(children), 'position.end', {}));
  return {
    start: start,
    end: end
  };
};
/**
 * 递归获得最后的一个文本节点
 * @param node
 * @return {*}
 */


exports.getChildrenPosition = getChildrenPosition;

var getLastChildLeaf = function getLastChildLeaf(node) {
  var leaf = _lodash.default.last(_lodash.default.get(node, 'children', [])); // 如果存在，则递归，否则返回自己


  if (leaf !== undefined) return getLastChildLeaf(leaf);
  return node;
};
/**
 * 将 ast 中的 text 内容合并起来，作为文本字符串！
 * @param node
 */


exports.getLastChildLeaf = getLastChildLeaf;

var astToText = function astToText(node) {
  var type = _lodash.default.get(node, 'type');

  if (['text', 'inlineCode', 'html'].indexOf(type) !== -1) return node.value;

  var childrenText = _lodash.default.get(node, 'children', []).map(astToText);

  return childrenText.join('');
};

exports.astToText = astToText;