"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fix = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _lint = require("./lint");

var _fixRules = _interopRequireDefault(require("./fix-rules"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var doFix = function doFix(markdown, errors) {};

var fix = function fix(markdown) {
  var rulesConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var newMarkdown = markdown;
  var retryMax = 20;
  var errorCnt = Infinity; // 最大值
  // 循环 lint，每次只修复第一个错误，知道修复完；todo 可以优化为每次修改一行
  // 为什么要循环 lint，因为每次修复错误，都会导致其他的错误位置产生偏移

  while (true) {
    var errors = (0, _lint.lint)(newMarkdown, rulesConfig, true);
    var newErrorCnt = errors.length; // 没有错误，终止处理

    if (newErrorCnt === 0) {
      break;
    } else if (newErrorCnt >= errorCnt) {
      // 或者错误数量变多了，或者变多的次数超过一定的数额
      retryMax--;

      if (retryMax <= 0) {
        break;
      }
    } // 如果存在错误，则处理第一个
    // const e = errors[0];
    // 随机处理


    var e = errors[_lodash.default.random(newErrorCnt - 1)];

    newMarkdown = (0, _fixRules.default)(newMarkdown, e);
    errorCnt = newErrorCnt;
  }

  return newMarkdown;
};

exports.fix = fix;