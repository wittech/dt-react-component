"use strict";

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.keys");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensurePanel = ensurePanel;
exports["default"] = exports.types = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var types;
exports.types = types;

(function (types) {
  types["TAB"] = "tab";
  types["PANEL"] = "panel";
  types["TOOL"] = "tool";
  types["PREVIEW"] = "preview";
  types["NOTES_ELEMENT"] = "notes-element";
})(types || (exports.types = types = {}));

function ensurePanel(panels, selectedPanel, currentPanel) {
  var keys = Object.keys(panels);

  if (keys.indexOf(selectedPanel) >= 0) {
    return selectedPanel;
  }

  if (keys.length) {
    return keys[0];
  }

  return currentPanel;
}

var _default = function _default(_ref) {
  var provider = _ref.provider,
      store = _ref.store;
  var api = {
    getElements: function getElements(type) {
      return provider.getElements(type);
    },
    getPanels: function getPanels() {
      return api.getElements(types.PANEL);
    },
    getSelectedPanel: function getSelectedPanel() {
      var _store$getState = store.getState(),
          selectedPanel = _store$getState.selectedPanel;

      return ensurePanel(api.getPanels(), selectedPanel, selectedPanel);
    },
    setSelectedPanel: function setSelectedPanel(panelName) {
      store.setState({
        selectedPanel: panelName
      }, {
        persistence: 'session'
      });
    },
    setAddonState: function setAddonState(addonId, newStateOrMerger, options) {
      var nextState;

      if (typeof newStateOrMerger === 'function') {
        var merger = newStateOrMerger;
        nextState = merger(api.getAddonState(addonId));
      } else {
        nextState = newStateOrMerger;
      }

      return store.setState({
        addons: _defineProperty({}, addonId, nextState)
      }, options).then(function () {
        return api.getAddonState(addonId);
      });
    },
    getAddonState: function getAddonState(addonId) {
      return store.getState().addons[addonId];
    }
  };
  return {
    api: api,
    state: {
      selectedPanel: ensurePanel(api.getPanels(), store.getState().selectedPanel),
      addons: {}
    }
  };
};

exports["default"] = _default;